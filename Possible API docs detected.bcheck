metadata:
    language: v2-beta
    name: "Possible API docs detected"
    description: "Checks for potential API docs when API traffic is suspected"
    tags: "API swagger openapi OAS3 passive"

run for each:
    # Use common Swagger paths as a base for potential API doc paths.
# Heavily borrowed from Daniel Miessler's swagger.txt from SecLists
    potential_doc_path =
        "/swagger/index.html",
        "/swagger/v1/swagger. json",
        "/swagger-ui.html",
        "/ swagger-resources",
        "/swagger/static/index.html",
        "/swagger-ui/swagger-json",
        "/ swagger/ui/index",
        "/apidocs/swagger.json",
        "/api-docs/swagger.json",
        "/swagger-ui/",
        "/swagger-docs",
        "/ swagger-docs/swagger.json",
        "/api-docs",
        "/apidocs",
        "/docs",
        "/docu",
        "/v1/swagger.json",
        "/api/apidocs",
        "/api/v1/apidocs",
        "/api/v2/apidocs",
        "/api/api-docs",
        "/api/v1/api-docs",
        "/api/v2/api-docs",
        "/swagger",
        "/swagger/",
        "/swagger. json",
        "/swagger-ui.html",
        "/swagger-ui.json",
        "/swagger. yml",
        "/api/swagger",
        "/api/swagger/",
        "/api/swagger. json",
        "/api/v2/swagger",
        "/api/v2/swagger/",
        "/api/v2/swagger.json",
        "/api/v2/swagger-ui/",
        "/api/v2/swagger-ui.html",
        "/api/v2/swagger-ui.json",
        "/graphql",
        "/api",
        "/api/v1/",
        "/api/v2",
        "/api/v3",
        "/v1/swagger json",
        "/v1/api-docs",
        "/v2/swagger. json",
        "/v2/api-docs",
        "/v3/swagger.json",
        "/v3/api-docs"

given request then
    if {to_lower(base.response.headers)} matches "application/json" then
        send request called apiDocCheck:
            method: "GET"
            replacing path: {potential_doc_path}
            headers:
                "Accept": "*/*"

        # While it isn't perfect, if we see artifacts referencing API docs, we should
# at least report the issue and investigate further later.
        if {apiDocCheck.response.status_code} is "200" then
            if {to_lower(apiDocCheck.response.body)} matches "swagger" or
                {to_lower(apiDocCheck.response.body)} matches "openapi" or
                {to_lower(apiDocCheck.response.body)} matches "open-api" or
                {to_lower(apiDocCheck.response.body)} matches "redoc" or
                {to_lower(apiDocCheck.response.body)} matches "OAS3" then
                report issue and continue:
                    severity: info
                    confidence: firm
                    detail: `Possible API docs found at {latest.request.url}`
                    remediation: "Check to see if API docs are located at this path."
            end if
        # End swagger check in body
        end if
    # End status_code check
    end if
